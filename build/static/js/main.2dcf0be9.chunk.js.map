{"version":3,"sources":["initial-data.js","task.js","column.js","index.js"],"names":["initialData","tasks","id","content","columns","title","taskIds","columnOrder","Container","styled","div","props","isDragDisabled","isDragging","Handle","Task","this","task","draggableId","index","provided","snapshot","draggableProps","innerRef","ref","dragHandleProps","React","Component","Title","h3","TaskList","isDraggingOver","Column","column","droppableId","isDropDisabled","type","droppableProps","map","key","placeholder","App","state","onDragStart","start","document","body","style","color","transition","homeIndex","indexOf","source","setState","onDragUpdate","update","snap","destination","console","log","opacity","Object","keys","length","backgroundColor","onDragEnd","result","finish","startTaskIds","Array","from","splice","newStart","finishTaskIds","newFinish","newState","newTaskIds","newColumn","newColumnOrder","direction","columnId","taskId","ReactDOM","render","getElementById"],"mappings":"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","file":"static/js/main.2dcf0be9.chunk.js","sourcesContent":["const initialData = {\n    tasks: {\n        'task-1': {id: 'task-1', content: 'BLA BLA 1'},\n        'task-2': {id: 'task-2', content: 'BLA BLA 2'},\n        'task-3': {id: 'task-3', content: 'BLA BLA 3'},\n        'task-4': {id: 'task-4', content: 'BLA BLA 4'}\n    },\n    columns: {\n        'column-1': {\n            id: 'column-1',\n            title: 'To do',\n            taskIds: ['task-1', 'task-2', 'task-3', 'task-4']\n        },\n        'column-2': {\n            id: 'column-2',\n            title: 'In progress',\n            taskIds: []\n        },\n        'column-3': {\n            id: 'column-3',\n            title: 'Done',\n            taskIds: []\n        }\n    },\n    columnOrder: ['column-1', 'column-2', 'column-3'],\n}\n\nexport default initialData;","import React from 'react';\nimport styled from 'styled-components';\nimport { Draggable } from 'react-beautiful-dnd';\n\nconst Container = styled.div`\n    border: 1px solid lightgrey;\n    border-radius: 2px;\n    padding: 8px;\n    margin-bottom: 8px;\n    background-color: ${props => \n        props.isDragDisabled\n            ? 'lightgrey'\n            : props.isDragging \n                ? 'lightgreen'\n                : 'white'\n    };\n\n    display: flex;\n`;\n\nconst Handle = styled.div`\n    width: 20px;\n    height: 20px;\n    background-color: orange;\n    border-radius: 4px;\n    margin-right: 8px;\n`;\n\nexport default class Task extends React.Component{\n    render(){\n        const isDragDisabled = this.props.task.id === 'task-1';\n        return (\n            <Draggable draggableId={this.props.task.id} index={this.props.index}\n                isDragDisabled={isDragDisabled}\n                >\n                {(provided, snapshot) => (\n                    <Container\n                        {...provided.draggableProps}\n                        innerRef={provided.innerRef}\n                        ref={provided.innerRef}\n                        isDragging={snapshot.isDragging}\n                        isDragDisabled={isDragDisabled}\n                    >\n                        <Handle \n                            {...provided.dragHandleProps}\n                            isDragDisabled={isDragDisabled}/>\n                        {this.props.task.content}\n                    </Container>\n                )}\n            </Draggable>\n        )\n        \n    }\n}","import React from 'react';\nimport styled from 'styled-components';\nimport { Droppable, Draggable } from 'react-beautiful-dnd';\nimport Task from './task';\n\nconst Container = styled.div`\n    margin: 8px;\n    border: 1px solid lightgrey;\n    background-color: white;\n    border-radius: 2px;\n    width: 220px;\n\n    display: flex;\n    flex-direction: column;\n`;\nconst Title = styled.h3`\n    padding: 8px;\n`;\nconst TaskList = styled.div`\n    padding: 8px;\n    transition: background-color 0.2s ease;\n    background-color: ${props => (props.isDraggingOver ? 'skyblue' : 'inherit')};\n    flex-grow: 1;\n    min-height:100px;\n`;\n\nexport default class Column extends React.Component{\n    render(){\n        return (\n            <Draggable draggableId={this.props.column.id} index={this.props.index}>\n                {(provided) => (\n                    <Container\n                        {...provided.draggableProps}\n                        innerRef={provided.innerRef}\n                        ref={provided.innerRef}>\n\n                        <Title {...provided.dragHandleProps}>{this.props.column.title}</Title>\n                            <Droppable droppableId={this.props.column.id}\n                                //type={this.props.column.id === 'column-3' ? 'done' : 'active'}\n                                isDropDisabled={this.props.isDropDisabled} type=\"task\"\n                                >\n                                {(provided, snapshot) => (\n                                    <TaskList\n                                        innerRef={provided.innerRef}\n                                        ref={provided.innerRef}\n                                        {...provided.droppableProps}\n                                        isDraggingOver={snapshot.isDraggingOver}\n                                    >\n                                        {this.props.tasks.map((task, index) => <Task key={task.id} task={task} index={index}/>)}\n                                        {provided.placeholder}\n                                    </TaskList>\n                                )}\n                            </Droppable>\n                    </Container>\n                )}\n            </Draggable>\n        )\n        \n    }\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport styled from 'styled-components';\nimport { DragDropContext, Droppable } from 'react-beautiful-dnd';\nimport initialData from './initial-data';\nimport Column from './column';\n\nconst Container = styled.div`\n    display: flex;\n`;\n\nclass App extends React.Component{\n    state = initialData;\n\n    onDragStart = (start) => {\n        document.body.style.color = 'orange';\n        document.body.style.transition = 'background-color 0.2s ease';\n\n        const homeIndex = this.state.columnOrder.indexOf(start.source.droppableId);\n\n        this.setState({\n            homeIndex,\n        });\n    }\n\n    onDragUpdate = (update, snap) => {\n        const { destination } = update;\n        console.log(destination)\n        console.log(snap)\n        const opacity = destination\n            ? destination.index / Object.keys(this.state.tasks).length\n            : 0;\n        document.body.style.backgroundColor = `rgba(153, 141, 217, ${opacity})`;\n    }\n\n    onDragEnd = result => {\n        this.setState({\n            homeIndex: null,\n        })\n\n        document.body.style.color = 'inherit';\n        document.body.style.backgroundColor = 'inherit';\n\n        const { destination, source, draggableId, type } = result;\n        console.log(result)\n\n        if(!destination){\n            return\n        }\n\n        if(destination.droppableId === source.droppableId &&\n            destination.index === source.index){\n                return;\n        }\n\n        if(type === 'column'){\n            const newColumnOrder = Array.from(this.state.columnOrder);\n            newColumnOrder.splice(source.index, 1);\n            newColumnOrder.splice(destination.index, 0, draggableId);\n\n            const newState = {\n                ...this.state,\n                columnOrder: newColumnOrder,\n            }\n            this.setState(newState);\n            return;\n        }\n\n        const start = this.state.columns[source.droppableId];\n        const finish  = this.state.columns[destination.droppableId];\n        \n        if(start === finish){\n            const newTaskIds = Array.from(start.taskIds);\n            newTaskIds.splice(source.index, 1);\n            newTaskIds.splice(destination.index, 0, draggableId);\n    \n            const newColumn = {\n                ...start,\n                taskIds: newTaskIds,\n            };\n    \n            const newState ={\n                ...this.state,\n                columns: {\n                    ...this.state.columns,\n                    [newColumn.id]: newColumn,\n                }\n            }\n            this.setState(newState);\n            return;\n        }\n\n        // moving from one list to another\n        const startTaskIds = Array.from(start.taskIds);\n        startTaskIds.splice(source.index, 1);\n        const newStart = {\n            ...start,\n            taskIds: startTaskIds,\n        };\n\n        const finishTaskIds = Array.from(finish.taskIds);\n        finishTaskIds.splice(destination.index, 0, draggableId);\n        const newFinish = {\n            ...finish,\n            taskIds: finishTaskIds,\n        };\n\n        const newState = {\n            ...this.state,\n            columns: {\n                ...this.state.columns,\n                [newStart.id]: newStart,\n                [newFinish.id]: newFinish,\n            },\n        };\n        this.setState(newState);\n    }\n\n    render() {\n        return (\n        <DragDropContext\n            onDragEnd={this.onDragEnd}\n            onDragStart={this.onDragStart}\n            onDragUpdate={this.onDragUpdate}\n        >\n            <Droppable droppableId=\"all-columns\" direction=\"horizontal\" type=\"column\">\n                {provided => (\n                    <Container\n                        {...provided.droppableProps}\n                        innerRef={provided.innerRef}\n                        ref={provided.innerRef}>\n                        {this.state.columnOrder.map((columnId, index) => {\n                            const column = this.state.columns[columnId];\n                            const tasks = column.taskIds.map(taskId => this.state.tasks[taskId]);\n\n                            const isDropDisabled = index < this.state.homeIndex;\n\n\n                            return <Column key={column.id} column={column} tasks={tasks} isDropDisabled={isDropDisabled} index={index}/>;\n                        })}\n                        {provided.placeholder}\n                    </Container>\n                )}\n            </Droppable>\n        </DragDropContext>\n        );\n    }\n}\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\n"],"sourceRoot":""}